{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAa,SAAS,gBAAgB,CAAC,W,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAExC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAQ,SAAS,aAAa,CAAC,SAErC,EAAM,YAAY,CAAC,MAAQ,GAA2B,MAAA,CAAzB,EAAM,YAAY,CAAC,QAChD,EAAM,SAAS,CAAC,GAAG,CAAC,eAEpB,IAAM,EAAO,EAAM,YAAY,CAAC,QAAQ,WAAW,GAC7C,EAAM,EAAM,YAAY,CAAC,QAAQ,WAAW,GAAG,OAAO,CAAC,OAE7D,CAAA,EAAM,WAAW,CAOV,QAAQ,IAAI,CAPc,GAQ5B,GAA2C,MAAA,CAAzC,AAR0B,EAQtB,KAAK,CAAC,EARsB,GAQZ,IAAM,AARA,EAQI,KAAK,CARH,IAAN,EACjC,EAAM,WAAW,CAYV,QAAQ,IAAI,CAZoB,GAanC,GAAyG,MAAA,CAAtG,AAbgC,CAa7B,CAAC,EAAE,CAAC,WAAW,GAAK,AAbS,EAaL,KAAK,CAAC,EAbK,GAaK,IAAM,AAbjB,EAaqB,KAAK,CAbpB,EAayB,CAAC,EAAE,CAAC,WAAW,GAAK,AAbnD,EAauD,KAAK,CAAC,AAbvD,EAa6D,IACrG,GAAsC,MAAA,CAApC,AAdgC,CAc7B,CAAC,EAAE,CAAC,WAAW,GAAK,AAdS,EAcL,KAAK,CAAC,IAZxC,EAAM,UAAU,CAAC,OAAO,CAAC,EAC3B,C,C,M,E,CAbK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar inputs = _to_consumable_array(document.querySelectorAll(\"input\"));\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var input = _step.value;\n        var label = document.createElement(\"label\");\n        label.setAttribute(\"for\", \"\".concat(input.getAttribute(\"id\")));\n        label.classList.add(\"field-label\");\n        var text = input.getAttribute(\"name\").toLowerCase();\n        var idx = input.getAttribute(\"name\").toLowerCase().indexOf(\"name\");\n        label.textContent = getLabelText(text, idx);\n        input.placeholder = getPlaceholderText(text, idx);\n        input.parentNode.prepend(label);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nfunction getLabelText(str, idx) {\n    return /name/g.test(str) ? \"\".concat(str.slice(0, idx) + \" \" + str.slice(idx)) : str;\n}\nfunction getPlaceholderText(str, idx) {\n    return /name/g.test(str) ? \"\".concat(str[0].toUpperCase() + str.slice(1, idx) + \" \" + str.slice(idx)[0].toUpperCase() + str.slice(idx + 1)) : \"\".concat(str[0].toUpperCase() + str.slice(1));\n}\n\n//# sourceMappingURL=index.6b73a3ba.js.map\n","'use strict';\n\nconst inputs = [...document.querySelectorAll('input')];\n\nfor (const input of inputs) {\n  const label = document.createElement('label');\n\n  label.setAttribute('for', `${input.getAttribute('id')}`);\n  label.classList.add('field-label');\n\n  const text = input.getAttribute('name').toLowerCase();\n  const idx = input.getAttribute('name').toLowerCase().indexOf('name');\n\n  label.textContent = getLabelText(text, idx);\n  input.placeholder = getPlaceholderText(text, idx);\n\n  input.parentNode.prepend(label);\n}\n\nfunction getLabelText(str, idx) {\n  return /name/g.test(str)\n    ? `${str.slice(0, idx) + ' ' + str.slice(idx)}`\n    : str;\n}\n\nfunction getPlaceholderText(str, idx) {\n  return /name/g.test(str)\n    ? `${str[0].toUpperCase() + str.slice(1, idx) + ' ' + str.slice(idx)[0].toUpperCase() + str.slice(idx + 1)}`\n    : `${str[0].toUpperCase() + str.slice(1)}`;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","inputs","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","input","value","label","createElement","setAttribute","concat","getAttribute","classList","add","text","toLowerCase","idx","indexOf","textContent","str","placeholder","toUpperCase","parentNode","prepend","err","return"],"version":3,"file":"index.6b73a3ba.js.map"}